---
title: "Untitled"
author: "Leo Carlsson"
date: "12/1/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```
# Dag 1
```{r}
input_df <-  read_tsv("input.txt", show_col_types = FALSE) 
input <- input_df %>% pull(values)
```

del 1
```{r}
output <- c()
for (n in 1:length(input)) {
        result <- input[n] < input[n+1]
        output <- c(output, result)
}
output
sum(output, na.rm = T)
```

del 2
```{r}
library(slider)
input <- input_df %>% 
        mutate(value2 = slide_sum(values, before = 2,
                                  complete = TRUE)) %>% 
        filter(!is.na(value2)) %>% 
        pull(value2)

output <- c()
for (n in 1:length(input)) {
        result <- input[n] < input[n+1]
        output <- c(output, result)
}
sum(output, na.rm = T)
```

# Dag 2
```{r}
input_df <-  read_tsv("input.txt", show_col_types = FALSE) 
input_df <- input_df %>% 
        separate(direction, into = c("direction", "distance"), sep = " ") %>% 
        mutate(distance = as.integer(distance))

output <- input_df %>% 
        group_by(direction) %>% 
        summarise(distance = sum(distance)) %>% 
        pivot_wider(names_from = direction, values_from = distance)

(output$down-output$up)*output$forward
```

```{r}
input_df
aim = 0
depth = 0
horizontal_position = 0

for (i in 1:length(input_df$distance)) {
        if(input_df$direction[i] == "down"){
                aim <-   aim+input_df$distance[i]
        }
        if(input_df$direction[i] == "up"){
                aim <-  aim-input_df$distance[i]
        }
        if(input_df$direction[i] == "forward"){
                horizontal_position <-  horizontal_position+input_df$distance[i]
                depth <- depth+(input_df$distance[i]*aim)
        }
}
depth*horizontal_position
```

# Dag 3
```{r}
input_df <-  read_tsv("input.txt", show_col_types = FALSE) 

input_df <- input_df %>% 
        separate(input, 
                 into = c("empty","first", "second", "third", "fourth", "fifth", "sixth",
                          "seventh", "eight", "nineth", "tenth", "eleventh", "twelveth"), 
                 sep = "") %>% 
        select(-empty) 

input_df %>% 
        summarise(across(everything(), DescTools::Mode)) %>% 
        unite(gamma_rate, sep="") %>% 
        mutate(gamma_rate = DescTools::BinToDec(gamma_rate)) %>% 
        bind_cols(
                input_df %>% 
                        summarise(across(everything(), DescTools::Mode)) %>% 
                        mutate(across(everything(), ~if_else(. == "1", "0", "1"))) %>% 
                        unite(epsilon_rate, sep="") %>% 
                        mutate(epsilon_rate = DescTools::BinToDec(epsilon_rate))
        ) %>% 
        mutate(power_consumption = gamma_rate*epsilon_rate)
```



```{r}
oxygen_generator_rating <- input_df
for (i in 1:length(oxygen_generator_rating)) {
        mode <- DescTools::Mode(as.numeric(pull(oxygen_generator_rating[,i])))
        if(is.na(mode)){
                mode <- 1
        } else if(length(mode)==2) {
                mode<-mode[2]
        } else{
                mode <- mode[1]
        }
        
        oxygen_generator_rating <- oxygen_generator_rating %>% 
                filter(oxygen_generator_rating[,i] == mode)
        if(nrow(oxygen_generator_rating) == 1) {
                break
        }
}


CO2_scrubber_rating <- input_df
for (i in 1:length(CO2_scrubber_rating)) {
        mode <- DescTools::Mode(as.numeric(pull(CO2_scrubber_rating[,i])))
        
        if(is.na(mode)){
                mode <- 0
        } else if(length(mode)==2) {
                mode<-mode[1]
        } else{
                mode <- mode[1]
                mode<- if_else(mode == 1, "0", "1")
        }
        
        CO2_scrubber_rating <- CO2_scrubber_rating %>% 
                filter(CO2_scrubber_rating[,i] == mode)
        if(nrow(CO2_scrubber_rating) == 1) {
                break
        }
}

oxygen_generator_rating %>% 
        unite(oxygen_generator_rating, sep="") %>% 
        mutate(oxygen_generator_rating = DescTools::BinToDec(oxygen_generator_rating)) %>% 
        bind_cols(CO2_scrubber_rating %>% 
                          unite(CO2_scrubber_rating, sep="") %>% 
                          mutate(CO2_scrubber_rating = DescTools::BinToDec(CO2_scrubber_rating))) %>% 
        mutate(life_support_rating = oxygen_generator_rating*CO2_scrubber_rating)

```
# Dag 4


```{r}
library(tidyverse)

input <- read_lines("dag4.txt")

bingo_numbers <- input[1] %>% str_split(",") %>% .[[1]] %>% as.numeric()

bingo_sheets <- tail(input, -2) %>% 
  .[. != ""] %>% 
  tibble(x = .) %>% 
  mutate(row_id = rep(1:5, nrow(.)/5)) %>% 
  mutate(sheet_id = rep(1:(nrow(.)/5), each = 5)) %>% 
  separate_rows(x, convert = TRUE) %>% 
  filter(!is.na(x)) %>% 
  mutate(col_id = rep(1:5, nrow(.)/5))

sheet_wins <- bingo_sheets %>% 
  rowwise() %>% 
  mutate(idx = which(bingo_numbers == x)) %>% 
  group_by(sheet_id, row_id) %>% 
  mutate(row_wins_at = max(idx)) %>% 
  group_by(sheet_id, col_id) %>% 
  mutate(col_wins_at = max(idx)) %>% 
  group_by(sheet_id) %>% 
  mutate(sheet_wins_at = min(min(row_wins_at, na.rm = TRUE), min(col_wins_at, na.rm = TRUE), na.rm = TRUE)) %>% 
  ungroup() 
```

```{r}
input <- readLines("dag4.txt")

read_matrix <- function(lines, sep = "", type = identity) {
  lines <- stringr::str_trim(lines)
  tokens <- strsplit(lines, sep)
  token_lengths <- lengths(tokens)
  res <- matrix(nrow = length(lines), ncol = max(token_lengths))

  for (i in seq_along(lines)) {
    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])
  }
  res
}

numbers <- strsplit(input[1], ",")[[1]] |> as.integer()

boards <- purrr::map(
  0:99,
  ~ read_matrix(input[3:7 + 6 * .x], "\\s+", type = as.integer)
)
```

```{r}
check_board <- function(board) {
  for (i in seq_along(numbers)) {
    matched <- matrix(board %in% numbers[seq_len(i)], nrow = 5)

    row_checks <- apply(matched, MARGIN = 1, prod)
    col_checks <- apply(matched, MARGIN = 2, prod)
    if (any(c(row_checks, col_checks) == 1)) break
  }
  i
}

win_times <- purrr::map_int(boards, check_board)

fastest_time <- min(win_times)
fastest_board <- boards[[which(win_times == fastest_time)]]

sum(setdiff(fastest_board, numbers[seq_len(fastest_time)])) *
  numbers[fastest_time]
```


```{r}
slowest_time <- max(win_times)
slowest_board <- boards[[which(win_times == slowest_time)]]

sum(setdiff(slowest_board, numbers[seq_len(slowest_time)])) *
  numbers[slowest_time]
```

```{r}
input <- readLines("day5") 

data <- tibble(x=input) %>% 
        extract(x, 
                c("x1", "y1", "x2", "y2"), 
                "(\\d+),(\\d+) -> (\\d+),(\\d+)") %>% 
        mutate(x = map2(x1, x2, seq),
               y = map2(y1, y2, seq))

horizontal_vertical <- data %>% 
        filter(x1 == x2 | y1 == y2) %>% 
        unnest(x) %>% 
        unnest(y) 

horizontal_vertical %>% 
        count(x,y) %>% 
        summarise(sum(n>1))
```
```{r}
aoc.elf::aoc_get(5)

tibble(x=input) %>% 
               separate(x, c("x1", "y1", "x2", "y2"), convert = T)
```


output_matrix[row, col] <-  test
}
}
output_matrix
}
filter<- check_adjecent(example)
filter<- check_adjecent(input)
filter<- check_adjecent(example)
example[filter]
example[filter] +1
example[filter] + 1
example[filter]
c(1,2,3)
example <- "2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("") %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE)
example
example <- "2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("") %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE) %>%
as.numeric()
example
<- example[filter] %>% as.numeric()
example[filter] %>% as.numeric()
res <- example[filter] %>% as.numeric()
res+1
sum(res+1)
filter<- check_adjecent(input)
res <- example[input]
sum(res+1)
example <- "2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("") %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE)
example
as.numeric(example)
as.numeric(example) %>% length()
as.numeric(example)
example <- "2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("") %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE)
"2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("")
example <- "2199943210,3987894921,9856789892,8767896789,9899965678" %>%
strsplit(",") %>%
`[[`(1) %>%
strsplit("")
example %>% as.numeric()
example %>% map(as.integer)
example %>%
map(as.integer) %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE) %>%
as.numeric()
example %>%
map(as.integer) %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE)
example <- example %>%
map(as.integer) %>%
unlist() %>%
matrix(ncol=10, byrow = TRUE)
filter<- check_adjecent(example)
res <- input[filter]
sum(res+1)
filter<- check_adjecent(input)
res <- input[filter]
sum(res+1)
filter<- check_adjecent(example)
res <- example[filter]
sum(res+1)
row <- 1
col <- 1
c(row + 1, row, row - 1, row)
c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row <- 1
col <- 1
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
!(row_id > nrow(example) | col_id > ncol(example))
row <- 2
col <- 1
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row_id <- row_id[subset]
col_id <- col_id[subset]
row <- 2
col <- 1
row_length <- nrow(example)
col_length <- ncol(example)
mat <- matrix(FALSE, row_length, col_length)
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row_id <- row_id[subset]
col_id <- col_id[subset]
row <- 1
col <- 1
row_length <- nrow(example)
col_length <- ncol(example)
mat <- matrix(FALSE, row_length, col_length)
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row_id <- row_id[subset]
col_id <- col_id[subset]
if (all(input[cbind(row_id, col_id)] > input[row, col])) {
if (all(input[cbind(row_id, col_id)] > input[row, col])) {
mat[row, col] <- TRUE
}
mat
if (all(example[cbind(row_id, col_id)] > example[row, col])) {
mat[row, col] <- TRUE
}
mat
row <- 1
col <- 2
row_length <- nrow(example)
col_length <- ncol(example)
mat <- matrix(FALSE, row_length, col_length)
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row_id <- row_id[subset]
col_id <- col_id[subset]
if (all(example[cbind(row_id, col_id)] > example[row, col])) {
mat[row, col] <- TRUE
}
mat
cbind(row_id, col_id
)
example[cbind(row_id, col_id)]
row <- 1
col <- 1
cbind(row_id, col_id)
row <- 1
col <- 1
row_length <- nrow(example)
col_length <- ncol(example)
mat <- matrix(FALSE, row_length, col_length)
row_id <- c(row + 1, row, row - 1, row)
col_id <- c(col, col + 1, col, col - 1)
subset <- !(row_id > nrow(example) | col_id > ncol(example))
row_id <- row_id[subset]
col_id <- col_id[subset]
cbind(row_id, col_id)
example[row, col]
example[cbind(row_id, col_id)]
cbind(row_id, col_id)
aoc.elf::aoc_init(10)
suppressPackageStartupMessages({
library(tidyverse)
library(here)
library(glue)
knitr::opts_chunk$set(echo = TRUE)
})
options(scipen = 9999999)
options(dplyr.summarise.inform = FALSE)
aoc.elf::aoc_get(10)
input <- readLines(here::here("2021/2021/day-10-input.txt"))
input
tibble(input) %>%
mutate(cleaned = str_remove_all(input, "\\(\\)"))
tibble(input) %>%
mutate(cleaned = str_remove_all(input, "\\(\\)"),
cleaned = str_remove_all(input, "\\[\\]"),
cleaned = str_remove_all(input, "\\{\\}"),
cleaned = str_remove_all(input, "<>"))
tibble(input)
tibble(input) %>%
mutate(input = str_remove_all(input, "\\(\\)"),
input = str_remove_all(input, "\\[\\]"),
input = str_remove_all(input, "\\{\\}"),
input = str_remove_all(input, "<>"))
tibble(input)
tibble(input) %>%
mutate(input = str_remove_all(input, "\\(\\)"),
input = str_remove_all(input, "\\[\\]"),
input = str_remove_all(input, "\\{\\}"),
input = str_remove_all(input, "<>"))
input
input %>% strsplit("")
suppressPackageStartupMessages({
library(tidyverse)
library(here)
library(glue)
knitr::opts_chunk$set(echo = TRUE)
})
options(scipen = 9999999)
options(dplyr.summarise.inform = FALSE)
remove_correct <- function(input) {
old <- input
repeat {
new = str_remove_all(old, "\\(\\)")
new = str_remove_all(old, "\\[\\]")
new = str_remove_all(old, "\\{\\}")
new = str_remove_all(old, "<>")
if(old == new) break
old <- new
}
old
}
tibble(input) %>%
mutate(input = remove_correct(input))
remove_correct <- function(input) {
old <- {{input}}
repeat {
new = str_remove_all(old, "\\(\\)")
new = str_remove_all(old, "\\[\\]")
new = str_remove_all(old, "\\{\\}")
new = str_remove_all(old, "<>")
if(old == new) break
old <- new
}
old
}
tibble(input) %>%
mutate(input = remove_correct(input))
remove_correct(input)
input
input %>% map(remove_correct)
input %>% map_chr(remove_correct)
remove_correct <- function(input) {
old <- input
repeat {
new = str_remove_all(old, "\\(\\)")
new = str_remove_all(old, "\\[\\]")
new = str_remove_all(old, "\\{\\}")
new = str_remove_all(old, "<>")
if(old == new) break
old <- new
}
old
}
input %>% map_chr(remove_correct)
remove_correct <- function(input) {
remove <- c("\\(\\)", "\\[\\]", "\\{\\}", "<>")
old <- input
repeat {
new = str_remove_all(old, remove)
if(old == new) break
old <- new
}
old
}
input %>% map_chr(remove_correct)
remove_correct <- function(input) {
remove <- c("\\(\\)" = "", "\\[\\]" = "", "\\{\\}" = "", "<>" = "")
old <- input
repeat {
new = str_replace_all(old, remove)
if(old == new) break
old <- new
}
old
}
input %>% map_chr(remove_correct)
example <-
c("[({(<(())[]>[[{[]{<()<>>",
"[(()[<>])]({[<{<<[]>>(",
"{([(<{}[<>[]}>{[]{[(<()>",
"(((({<>}<{<{<>}{[]{[]{}",
"[[<[([]))<([[{}[[()]]]",
"[{[{({}]{}}([{[{{{}}([]",
"{<[[]]>}<{[{[{[]{()[[[]",
"[<(<(<(<{}))><([]([]()",
"<{([([[(<>()){}]>(<<{{",
"<{([{{}}[<[[[<>{}]]]>[]]")
example
example %>% map_chr(remove_correct)
str_detect("aecfg", letters)
str_detect(letters, "aecfg")
cleaned %>% map_chr(~str_detect(., c(")", "]", "}", ">")))
cleaned <- example %>% map_chr(remove_correct)
cleaned %>% map_chr(~str_detect(., c(")", "]", "}", ">")))
cleaned %>% map_chr(~str_detect(., c("\\)", "\\]", "\\}", ">")))
letters
closure <- c("\\)", "\\]", "\\}", ">")
cleaned %>% map_chr(~str_detect(., closure))
cleaned
cleaned %>% map_lgl(~str_detect(., closure))
closure_detector <- function(input) {
closure <- c("\\)", "\\]", "\\}", ">")
res <- str_detect(input, closure)
any(res)
}
cleaned %>% map_lgl(closure_detector)
cleaned[filter]
example <- c(
"[({(<(())[]>[[{[]{<()<>>",
"[(()[<>])]({[<{<<[]>>(",
"{([(<{}[<>[]}>{[]{[(<()>",
"(((({<>}<{<{<>}{[]{[]{}",
"[[<[([]))<([[{}[[()]]]",
"[{[{({}]{}}([{[{{{}}([]",
"{<[[]]>}<{[{[{[]{()[[[]",
"[<(<(<(<{}))><([]([]()",
"<{([([[(<>()){}]>(<<{{",
"<{([{{}}[<[[[<>{}]]]>[]]")
example
cleaned <- example %>% map_chr(remove_correct)
filter <- cleaned %>% map_lgl(closure_detector)
filter
cleaned[filter]
cleaned[filter] %>% str_extract(c("\\)", "\\]", "\\}", ">"))
remove_openers <- function(input) {
openers <- c("\\(" = "", "\\{" = "", "\\[" = "", "<" = "")
str_replace_all(input, openers)
}
cleaned[filter] %>% map_chr(remove_openers)
test <- cleaned[filter] %>% map_chr(remove_openers)
test
test[1]
str_split(test[1], "")
str_split(test[1], "")[[1]]
str_split(test[1], "")[[1]][1]
str_split(test[1], "")[[[1]]]
str_split(test[1], "")[[1]]
extract_first <- function(input) {
strsplit(input,"")[[1]][1]
}
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first)
give_points <- function(input) {
values <- c("\\)" = "3",
"\\]" = "57",
"\\}" = "1197",
">" = "25137")
as.integer(str_replace(input, values))
}
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first) %>%
map_int(give_points)
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first)
give_points <- function(input) {
values <- c("\\)" = "3",
"\\]" = "57",
"\\}" = "1197",
">" = "25137")
as.integer(str_replace_all(input, values))
}
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first) %>%
map_int(give_points)
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first) %>%
map_int(give_points) %>%
sum()
input <- readLines(here::here("2021/2021/day-10-input.txt"))
example <- c(
"[({(<(())[]>[[{[]{<()<>>",
"[(()[<>])]({[<{<<[]>>(",
"{([(<{}[<>[]}>{[]{[(<()>",
"(((({<>}<{<{<>}{[]{[]{}",
"[[<[([]))<([[{}[[()]]]",
"[{[{({}]{}}([{[{{{}}([]",
"{<[[]]>}<{[{[{[]{()[[[]",
"[<(<(<(<{}))><([]([]()",
"<{([([[(<>()){}]>(<<{{",
"<{([{{}}[<[[[<>{}]]]>[]]")
remove_correct <- function(input) {
remove <- c("\\(\\)" = "", "\\[\\]" = "", "\\{\\}" = "", "<>" = "")
old <- input
repeat {
new = str_replace_all(old, remove)
if(old == new) break
old <- new
}
old
}
remove_openers <- function(input) {
openers <- c("\\(" = "", "\\{" = "", "\\[" = "", "<" = "")
str_replace_all(input, openers)
}
extract_first <- function(input) {
strsplit(input,"")[[1]][1]
}
give_points <- function(input) {
values <- c("\\)" = "3",
"\\]" = "57",
"\\}" = "1197",
">" = "25137")
as.integer(str_replace_all(input, values))
}
cleaned <- example %>% map_chr(remove_correct)
filter <- cleaned %>% map_lgl(closure_detector)
closure_detector <- function(input) {
closure <- c("\\)", "\\]", "\\}", ">")
res <- str_detect(input, closure)
any(res)
}
cleaned <- example %>% map_chr(remove_correct)
filter <- cleaned %>% map_lgl(closure_detector)
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first) %>%
map_int(give_points) %>%
sum()
cleaned <- input %>% map_chr(remove_correct)
filter <- cleaned %>% map_lgl(closure_detector)
cleaned[filter] %>%
map_chr(remove_openers) %>%
map_chr(extract_first) %>%
map_int(give_points) %>%
sum()
filter <- cleaned %>% map_lgl(closure_detector)
cleaned <- example %>% map_chr(remove_correct)
filter <- cleaned %>% map_lgl(closure_detector)
cleaned
cleaned[!filter]
completer <- function(input) {
input <- stringi::stri_reverse(input)
replacement <- c("\\(" = "\\)", "\\{" = "\\}", "\\[" = "\\]", "<" = ">")
str_replace_all(input, replacement)
}
cleaned[!filter] %>% map_chr(completer)
cleaned[!filter]
cleaned[!filter] %>% map_chr(completer)
test <- cleaned[!filter] %>% map_chr(completer)
test
strsplit(test, "")
strsplit(test[1], "")
strsplit(test[1], "")[[1]]
points <- c("\\(" = "1", "\\{" = "3", "\\[" = "2", "<" = "4")
str_replace_all(test, points)
points <- c("\\)" = "1", "\\}" = "3", "\\]" = "2", ">" = "4")
str_replace_all(test, points)
test2 <- str_replace_all(test, points)
str_replace_all(test, points)
strsplit(test2[1], "")[[1]]
strsplit(test2[1], "")[[1]] %>% as.numeric()
strsplit(test2[1], "")[[1]] %>% as.integer()
1:length(test2)
test2
strsplit(test2[1], "")[[1]] %>% as.integer()
test2 <- strsplit(test2[1], "")[[1]] %>% as.integer()
test2
1:length(test2)
completion_pointer <- function(input) {
points <- c("\\)" = "1", "\\}" = "3", "\\]" = "2", ">" = "4")
input <- str_replace_all(input, points)
input <- strsplit(input,"")[[1]] %>% as.integer()
score <- 0
for (i in 1:length(input)) {
score <- score*5
score <- score+input[i]
}
score
}
cleaned[!filter] %>% map_chr(completer)
cleaned[!filter] %>% map_chr(completer) %>%
map_int(completion_pointer)
cleaned[!filter] %>% map_chr(completer)
points <- c("\\)" = "1", "\\}" = "3", "\\]" = "2", ">" = "4")
test2 <- str_replace_all(test, points)
test2 <- strsplit(test2[1], "")[[1]] %>% as.integer()
test2
test
str_replace_all(test, points)
str_replace_all(test[1], points)
test2 <- str_replace_all(test[1], points)
strsplit(test2[1], "")
strsplit(test2[1], "")[[1]]
strsplit(test2[1], "")[[1]] %>% as.integer()
test2 <- strsplit(test2[1], "")[[1]] %>% as.integer()
score <- 0
test2
test2
score <- 0
for (i in 1:length(test2)) {
score <- score*5
score <- score+test2[i]
}
score
cleaned[!filter] %>% map_chr(completer) %>%
map_int(completion_pointer)
cleaned[!filter] %>% map_chr(completer) %>%
map_dbl(completion_pointer)
cleaned[!filter] %>% map_chr(completer) %>%
map_dbl(completion_pointer) %>%
median()
cleaned <- input %>% map_chr(remove_correct)
cleaned
filter <- cleaned %>% map_lgl(closure_detector)
cleaned[!filter] %>% map_chr(completer) %>%
map_dbl(completion_pointer) %>%
median()
gc()
gc()
getwd()
